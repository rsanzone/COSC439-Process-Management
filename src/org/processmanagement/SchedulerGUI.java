/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.processmanagement;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import org.processmanagement.fileio.FileManager;
import org.processmanagement.processes.PRandom;
import org.processmanagement.scheduling.FirstInFirstOut;
import org.processmanagement.scheduling.RoundRobin;
import org.processmanagement.scheduling.ShortestJobFirst;
import org.processmanagement.processes.Process;

/**
 *
 * @author Joe
 */
public class SchedulerGUI extends javax.swing.JFrame {
ArrayList<String> results = new ArrayList<String>();
ArrayList<Process> loadedPList = new ArrayList<Process>();
    /**
     * Creates new form SchedulerGUI
     */
    public SchedulerGUI() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        numProc = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        runButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsArea = new javax.swing.JTextArea();
        savList = new javax.swing.JCheckBox();
        savName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuBatch = new javax.swing.JMenuItem();
        loadList = new javax.swing.JMenuItem();
        useSavBox = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        optionsBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First in First Out", "Shortest Job First", "Round Robin"}));

        jLabel1.setText("Choose an Algorithm");

        numProc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numProcActionPerformed(evt);
            }
        });

        jLabel2.setText("Number of Processes?");

        runButton.setText("Run!");
        runButton.setToolTipText("");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        resultsArea.setColumns(20);
        resultsArea.setRows(5);
        jScrollPane1.setViewportView(resultsArea);

        savList.setText("Save Process List?");
        savList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savListActionPerformed(evt);
            }
        });

        jLabel3.setText("Desired file name");

        jMenu1.setText("File");

        menuBatch.setText("Run Large Batch Coparison");
        menuBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBatchActionPerformed(evt);
            }
        });
        jMenu1.add(menuBatch);

        loadList.setText("Load Saved List");
        loadList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadListActionPerformed(evt);
            }
        });
        jMenu1.add(loadList);

        useSavBox.setText("Use Saved List?");
        jMenu1.add(useSavBox);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(runButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(optionsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(124, 124, 124)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(numProc, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(savName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(savList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 475, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, optionsBox});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, numProc});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optionsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(runButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(savList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(savName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(27, 27, 27)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void numProcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numProcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numProcActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        //initialize
        String fileNam;
        String p = numProc.getText();
        Integer numProcess = null;
        ArrayList<Process> holder = new ArrayList<Process>();
        PRandom random = new PRandom();
        
        //Get selected option
        int selection = optionsBox.getSelectedIndex();
        
        
        try{
            if (useSavBox.isSelected()){
                numProcess=0;
                holder = copy(loadedPList);
            }
            else{
            numProcess = Integer.valueOf(p);
            holder = copy(random.genProcesses(numProcess));
            }
        do{
        //Check to see if user wants list saved
        if(savList.isSelected()){
            FileManager manager = new FileManager();
            if (!savName.getText().isEmpty()){
                fileNam = savName.getText();
                manager.savePList(holder, fileNam);
                savName.setText("File Saved!");
            }
            else{
                fileNam = JOptionPane.showInputDialog("File name was left blank! \nPlease enter a file name.");
                manager.savePList(holder, fileNam);
                savName.setText("File Saved!");
            }
        }
        savList.setSelected(false);
            switch (selection){
                        case 0: {
                                FirstInFirstOut fifoTest = new FirstInFirstOut();
                                fifoTest.setPList(copy(holder));
                                results.add(fifoTest.start()+"\n"+fifoTest.printStats()+"\n"+fifoTest.printProcesses());
                                printResults(results);
				break;
			}
			case 1: {
				ShortestJobFirst sjfTest = new ShortestJobFirst();
				sjfTest.setPList(copy(holder));
				results.add(sjfTest.start()+"\n"+sjfTest.printStats()+"\n"+sjfTest.printProcesses());
                                printResults(results);
				break;
			}
			case 2: {
                                String inputQuant = JOptionPane.showInputDialog("Please input a time quantum");
                                int quantum = Integer.parseInt(inputQuant);

				RoundRobin rrTest = new RoundRobin(quantum);
				rrTest.setPList(copy(holder));
				results.add(rrTest.start()+"\n"+rrTest.printStats()+"\n"+rrTest.printProcesses());
                                printResults(results);
				break;

			}
                        default:{
                            JOptionPane.showMessageDialog(null, "Please make a Selection.", "alert", JOptionPane.ERROR_MESSAGE);
                            break;
                        }
                      }

        }while(selection!=selection);
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please enter a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void savListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_savListActionPerformed

    private void loadListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadListActionPerformed
        useSavBox.setSelected(true);
        FileManager manager = new FileManager();
        loadedPList = manager.loadPList();       
    }//GEN-LAST:event_loadListActionPerformed

    private void menuBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBatchActionPerformed
				float fifoWaitTime = 0;
				float fifoCompTime = 0;
				float sjfWaitTime = 0;
				float sjfCompTime = 0;
				float rrWaitTime = 0;
				float rrCompTime = 0;
                                String finalResult = "";
				
				PRandom random = new PRandom();
				String numSim = JOptionPane.showInputDialog("How many simulations would you like to run?");
				int num = Integer.parseInt(numSim);
				for(int i = 0;i<num;i++){
					ArrayList<Process> list = random.genProcesses_randNum();
					
					FirstInFirstOut fifo = new FirstInFirstOut();
					fifo.setPList(copy(list));
					fifo.start();
					fifoWaitTime += fifo.getTotalWaitTime()/fifo.getSize();
					fifoCompTime += fifo.getTotalCompTime()/fifo.getSize();
					
					ShortestJobFirst sjf = new ShortestJobFirst();
					sjf.setPList(copy(list));
					sjf.start();
					sjfWaitTime += sjf.getTotalWaitTime()/sjf.getSize();
					sjfCompTime += sjf.getTotalCompTime()/sjf.getSize();
					
					RoundRobin rr = new RoundRobin(random.randomInt(1, 20));
					rr.setPList(copy(list));
					rr.start();
					rrWaitTime += rr.getTotalWaitTime()/rr.getSize();
					rrCompTime += rr.getTotalCompTime()/rr.getSize();
				}
				finalResult+=("After "+num+" simulations, the stats were as follows: ");
				finalResult+=("\n\nFirst In First Out: Avg Wait Time = "+fifoWaitTime/num+" Avg Turnaround Time = "+fifoCompTime/num);
				finalResult+=("\n\nShortest Job First: Avg Wait Time = "+sjfWaitTime/num+" Avg Turnaround Time = "+sjfCompTime/num);
				finalResult+=("\n\nRound Robin:        Avg Wait Time = "+rrWaitTime/num+" Avg Turnaround Time = "+rrCompTime/num);
                                resultsArea.setText(finalResult);
    }//GEN-LAST:event_menuBatchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SchedulerGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem loadList;
    private javax.swing.JMenuItem menuBatch;
    private javax.swing.JTextField numProc;
    private javax.swing.JComboBox optionsBox;
    private javax.swing.JTextArea resultsArea;
    private javax.swing.JButton runButton;
    private javax.swing.JCheckBox savList;
    private javax.swing.JTextField savName;
    private javax.swing.JCheckBoxMenuItem useSavBox;
    // End of variables declaration//GEN-END:variables

public static ArrayList<Process> copy(ArrayList<Process> origin){
		ArrayList<Process> copy = new ArrayList<Process>();
		for(Process p:origin){
			copy.add(p.deepCopy());
		}
		return copy;
	}
public void printResults(ArrayList<String> data){
    String finalResult = "";
    for(int i=0;i<data.size();i++)
        finalResult+=("\n"+"\nSimulation Number: "+(i+1)+"\n-----------------------------------------------------------------------------------"
                + "\n"+data.get(i));
    resultsArea.setText(finalResult);
}
}
